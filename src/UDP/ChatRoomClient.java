/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UDP;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketAddress;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.HashSet;
import java.util.Scanner;
import javax.swing.JOptionPane;
/**
 *
 * @author jthha
 */
public class ChatRoomClient extends javax.swing.JFrame {

    /**
     * Creates new form ChatRoomClient
     */
    public ChatRoomClient() {
        initComponents();
    }
    public void startChatting()throws Exception{
        //try{
            String IP = "10.103.48.140";
            String hostName = "DESKTOP-4S77T69";
            connectToHost(IP, hostName);
            recieveMessages();
        //}
        //catch(Exception e){
            
        //}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        txtMessage = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtMessages.setEditable(false);
        txtMessages.setColumns(20);
        txtMessages.setRows(5);
        jScrollPane1.setViewportView(txtMessages);

        btnSend.setText("Send");
        btnSend.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSendMousePressed(evt);
            }
        });

        txtMessage.setText("Enter messages here.");
        txtMessage.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                    .addComponent(txtMessage))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSendMousePressed
        sendMessage(txtMessage.getText());
        txtMessage.setText("");
        
    }//GEN-LAST:event_btnSendMousePressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    private static DatagramSocket socket;
    private static InetAddress thisAddr;
    private static InetAddress addr;
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatRoomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatRoomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatRoomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatRoomClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //String IP = (String)JOptionPane.showInputDialog("Please enter the IP address of the host computer\nusing . separating the numbers.");
        //String hostName = (String)JOptionPane.showInputDialog("Please enter name of the host computer exactly.");
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                ChatRoomClient form = new ChatRoomClient();
                form.setVisible(true);
                try{
                    form.startChatting();
                }
                catch(Exception e){
                    
                }
            }
        });
//        ChatRoomClient form = new ChatRoomClient();
//        form.setVisible(true);
//        form.startChatting();
    }
    
    private void sendMessage(String message){
        try{
            String s = thisAddr.getHostName() + "-->" + txtMessage.getText();
            byte[] buffer = s.getBytes();
            DatagramPacket p = new DatagramPacket(buffer,buffer.length,addr,4000);
            socket.send(p);
            txtMessage.setText("");
        }
        catch(IOException e){
            
        }
    }
    
    private void connectToHost(String IP, String hostName){
        try{
            System.out.println(IP);
            IP = IP.replace('.', ' ');
            Scanner IPScanner = new Scanner(IP);
            System.out.println(IP);
            int port = 4005;
            socket = new DatagramSocket(port);
            byte IPv4[] = new byte[4];
            System.out.println(IP);
            for(int i = 0; i < 4; i++){
                int j = IPScanner.nextInt();
                if(j > 127)
                    j = j-256;
                IPv4[i] = (byte)j;
            }
            addr = InetAddress.getByAddress(hostName, IPv4); 
            thisAddr = InetAddress.getLocalHost();
            System.out.println(addr.isReachable(10000));
            String s = thisAddr.getHostName() + " has joined the room.";
            byte[] buffer = s.getBytes();
            DatagramPacket p = new DatagramPacket(buffer,buffer.length,addr,4000);
            socket.send(p);
        }
        catch(SocketException e){
            System.out.println("we fucked up1");
        }
        catch(UnknownHostException e){
            System.out.println("we fucked up2");
        }
        catch(IOException e){
            System.out.println("we fucked up3");
        }
    }
    private void recieveMessages() throws Exception{
        String s;
        Scanner in = new Scanner(System.in);
        socket.setSoTimeout(1000);
        while(true){
            s = receiveHelper();
            System.out.println(s);
            txtMessages.setText(txtMessages.getText() + "\n" + s);
        }
    }
    private String receiveHelper() throws Exception{
        try{
             byte[] buffer = new byte[1024];
            DatagramPacket packet = new DatagramPacket(buffer,buffer.length);
            socket.receive(packet);
            String message = "";
            for(byte b : buffer)
                message += (char)b + "";
            return message;
            
        }
        catch(SocketTimeoutException e){
            return "";
        }
        catch(SocketException e){
            throw e;
        }
        catch(IOException e){
            throw e;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextArea txtMessages;
    // End of variables declaration//GEN-END:variables
}
